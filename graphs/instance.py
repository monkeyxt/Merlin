################################################################################
# File      instance.py
# Date      July 12, 2024
#
# Representation of a MIS instance
################################################################################
import networkx as nx
from typing import Any, Dict

class Instance(object):
    """
    Representation of a MIS instance that stores information of the generated
    instance. Allows saving to desired formats and reading in from a networkx
    generated graph.
    """
    def __init__(self) -> None:
        self.vertices = {}
        self.edges = set()
        self.graph = nx.empty_graph()

    def add_node(self, id: int, **attrs) -> None:
        """Add a node to our dict"""
        self.vertices[id] = attrs
    
    def add_edge(self, u: int, v: int) -> None:
        """Add an edge to our set of edges"""
        self.edges.add((min(u, v), max(u, v)))

    def save_to_file(self, outfile) -> str:
        """Dumps the instance to an edgelist"""
        with open(f"{outfile}.edgelist", 'w') as f:
            f.write(f"{self.graph.number_of_nodes()}\n")
            for edge in self.graph.edges():
                f.write(f"{edge[0]} {edge[1]}\n")

    def get_networkx_graph(self) -> nx.Graph:
        """Returns the stored graph"""
        return self.graph

    def convert_from_networkx(self, graph: nx.Graph) -> None:
        """Saves a graph generated by networkx"""
        for edge in graph.edges:
            self.add_edge(*edge)
        for node in graph.nodes:
            self.add_node(node)
        self.graph = graph
